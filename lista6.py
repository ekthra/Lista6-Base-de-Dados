# -*- coding: utf-8 -*-
"""Lista6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jQSq3Rum6XLH83IQcTB64MGW4cezW71T

# Estruturas de dados

## Ordenação
"""

def bubble_sort(vetor):
  n=len(vetor)
  for i in range(n):
    for j in range(0,n-i-1):
      if vetor[j]>vetor[j+1]:
        aux=vetor[j]
        vetor[j]=vetor[j+1]
        vetor[j+1]=aux
  return (vetor)

def select_sort(vetor):
  n=len(vetor)
  for i in range(n):
    id_min=i
    for j in range(i+1,n):
      if vetor[id_min]>vetor[j]:
        id_min=j
    aux=vetor[i]
    vetor[i]=vetor[id_min]
    vetor[id_min]=aux
  return (vetor)

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

"""## Lista Sequencial"""

import numpy as np

class Listasequencial:

    def __init__(self, capacidade):
        self.capacidade = capacidade
        self.ultima_posicao = -1
        self.valores = np.empty(self.capacidade, dtype=int)

    def imprime(self):
        if self.ultima_posicao == -1:
            print('O vetor está vazio')
        else:
            for i in range(self.ultima_posicao + 1):
                print(i, ' - ', self.valores[i])

    def insere(self, valor):
        if self.ultima_posicao == self.capacidade - 1:
            print('Capacidade máxima atingida')
        else:
            self.ultima_posicao += 1
            self.valores[self.ultima_posicao] = valor

    def pesquisar(self, valor):
        for i in range(self.ultima_posicao + 1):
            if (valor==self.valores[i]):
                return i
        return -1

    def excluir(self, valor):
        posicao = self.pesquisar(valor)
        if posicao == -1:
            return -1
        else:
            for i in range(posicao, self.ultima_posicao):
                self.valores[i] = self.valores[i + 1]
        self.ultima_posicao -= 1

"""## Pilha"""

class Pilha:

    def __init__(self):
        self.items = []

    def empilhar(self, item):
        self.items = self.items + [item]

    def desempilhar(self):
        if not self.is_vazia():
            item_removido = self.items[-1]
            self.items = self.items[:-1]
            return item_removido
        else:
            print("A pilha está vazia. Não é possível desempilhar.")

    def topo(self):
        if not self.is_vazia():
            return self.items[-1]
        else:
            print("A pilha está vazia. Não há topo para visualizar.")

    def is_vazia(self):
        return len(self.items) == 0

    def tamanho(self):
        return len(self.items)

    def imprimir(self):
        if not self.is_vazia():
            print("Itens da pilha:")
            for item in self.items:
                print(item)
        else:
            print("A pilha está vazia. Não há itens para imprimir.")

"""## Importando dados do GitHub"""

import pandas as pd

# URL do arquivo csv no GitHub
url = 'https://raw.githubusercontent.com/ekthra/Lista6-Base-de-Dados/main/data_temp.csv'

# Ler o arquivo CSV usando pandas e criando o objeto df1 (DataFrame)
df1 = pd.read_csv(url)

# Verificando o tamanho do DataFrame
df1.shape

# Exibir a estrutura do DataFrame
df1.info()

# Verificando se existe conteúdo em branco no dataframe
df1.isnull().sum()

# Apagando os conteúdos em branco no dataframe
df1.dropna(inplace=True, axis=0)

# Convertendo uma coluna do DataFrame numa lista
listaq1 = df1[:1000]['Temperature'].to_list()

# Verificando o tamanho da lista
len(listaq1)

# Como separar os registros dependendo do Tipo de Prova
# Tipo A -    0 - 1000
# Tipo B - 1000 - 2000
# Tipo C - 2000 - 3000
# Tipo D - 3000 - 4000
# Tipo E - 4000 - 5000
# Tipo F - 5000 - 6000

# Pegando os dados para a Prova do Tipo A
df1[:1000]

# Carregando os dados
listatipoa = df1[:1000]['Temperature'].to_list()
listatipob = df1[1000:2000]['Temperature'].to_list()
listatipoc = df1[2000:3000]['Temperature'].to_list()
listatipod = df1[3000:4000]['Temperature'].to_list()
listatipoe = df1[4000:5000]['Temperature'].to_list()
listatipof = df1[5000:6000]['Temperature'].to_list()

"""
Questão 01 - Após carregar a base de dados, construa uma estrutura de ListaSequencial e adicione as primeiras 150 temperaturas, em seguida identifique a primeira temperatura cadastrada? Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq1 = df1[4000:5000]['Temperature'].to_list()

listasq = Listasequencial(150)

for i in range(150):
  listasq.insere(listaq1[i])

listasq.imprime()

""" Questão 02 - Após carregar a base de dados, classifique com a estrutura select_sort e em seguida mostre as 5 temperaturas mais altas? Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq2 = df1[4000:5000]['Temperature'].to_list()

listaq2 = select_sort(listaq2)

for i in listaq2[-5:]:
  print(i)

"""Questão 03 - Após carregar a base de dados, classifique com a estrutura bubble_sort e em seguida mostre as 3 temperaturas mais baixas, você deve utilizar a estrutura for e range para responder essa questão? Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq3 = df1[4000:5000]['Temperature'].to_list()

listaq3 = bubble_sort(listaq2)

for i in listaq3[0:3]:
  print(i)

"""Questão 04 - Após carregar a base de dados, crie dois contadores para identificar quantas temperaturas são valores pares e impares?  Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq4 = df1[4000:5000]['Temperature'].to_list()
cp = 0
ci = 0

for i in listaq4:
  if i % 2 == 0:
    cp += 1
  else:
    ci += 1
print(cp,ci)

"""Questão 05 - Após carregar a base de dados, classifique utilizando o select_sort, em seguida crie um trecho de código para contar quantas vezes o valor 1598 apareceu na lista?  Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq5 = df1[4000:5000]['Temperature'].to_list()
c = 0
listaq5 = select_sort(listaq5)

for i in listaq5:
  if i == 1598:
    c += 1
print(c)

"""Questão 06 - Após carregar a base de dados, classifique os dados (bubble_sort) e em seguida calcule a médias das 15 temperaturas mais altas?  Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq6 = df1[4000:5000]['Temperature'].to_list()
somador = 0
listaq6 = bubble_sort(listaq6)

for i in listaq6[-1:-16:-1]:
  somador += i
media = somador/15
print(media)

"""Questão 07 - Após carregar a base de dados, construa uma estrutura de PILHA e adicione (empilhar) as primeiras 150 temperaturas, em seguida desempilhe 45 e responda qual a temperatura que ficou no topo da PILHA?"""

listaq7 = df1[4000:5000]['Temperature'].to_list()

p = Pilha()

for i in listaq7[0:150:]:
  p.empilhar(i)

for i in range(45):
  p.desempilhar()
print(p.topo())

"""Questão 08 - Após carregar a base de dados, construa uma estrutura de PILHA e adicione (empilhar) as primeiras 50 temperaturas que são números pares, em seguida desempilhe 25 e responda qual a temperatura que ficou no topo da PILHA?"""

listaq8 = df1[4000:5000]['Temperature'].to_list()
contadorpar = 0
p = Pilha()

for i in listaq8:
  if i % 2 == 0:
    p.empilhar(i)
    contadorpar += 1
  if contadorpar == 50:
    break
for i in range(25):
  p.desempilhar()
p.topo()

"""Questão 09 - Após carregar a base de dados, construa uma estrutura para contar quantas temperaturas  são maior ou igual a 1550? Marque a opção correta para a sua base de dados e copie o trecho de código que você utilizou para chegar na resposta."""

listaq9 = df1[4000:5000]['Temperature'].to_list()
contador = 0

for i in listaq9:
  if i >= 1550:
    contador += 1

print(contador)

"""Questão 10 - Após carregar a base de dados, classifique com a estrutura Select_sort, em seguida construa uma estrutura de PILHA e adicione (empilhar) as 250 temperaturas mais altas, em seguida desempilhe 50 e responda qual a temperatura que ficou no topo da PILHA?"""

listaq10 = df1[4000:5000]['Temperature'].to_list()

listaq10 = select_sort(listaq10)
p = Pilha()

for i in listaq10[-1:-251:-1]:
  p.empilhar(i)
for i in range(50):
  p.desempilhar()

p.topo()